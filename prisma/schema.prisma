// Recycly - Role-based Recycling App Database Schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  SUPER_ADMIN
  ADMIN
  WASTE_MANAGER
  USER
}

// Waste deposit status enum
enum WasteDepositStatus {
  PENDING
  ASSIGNED
  COLLECTED
  VERIFIED
  COMPLETED
  CANCELLED
}

// Credit transaction types
enum CreditType {
  EARNED
  WITHDRAWN
  BONUS
  REFUND
}

// Notification types
enum NotificationType {
  DEPOSIT_REQUEST
  DEPOSIT_ASSIGNED
  DEPOSIT_VERIFIED
  PAYOUT_APPROVED
  PAYOUT_REJECTED
  SYSTEM_ANNOUNCEMENT
}

// Payout request status
enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
}

// Waste manager assignment status
enum AssignmentStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Users table with role-based access
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  phone             String?
  role              UserRole @default(USER)
  
  // Location data (permanent storage for efficiency)
  latitude          Decimal? @db.Decimal(10, 8) // More precise for coordinates
  longitude         Decimal? @db.Decimal(11, 8)  // More precise for coordinates
  address           String?
  
  // Waste manager specific fields
  governmentId      String?  @unique
  certificateUrl    String?
  isVerified        Boolean  @default(false)
  isAvailable       Boolean  @default(true) // For waste managers
  
  // User activity tracking
  lastLogin         DateTime?
  creditsBalance    Decimal  @db.Decimal(10, 2) @default(0) // Cached balance for performance
  
  // Audit columns
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete support
  
  // Relations
  wasteDeposits     WasteDeposit[]
  assignedDeposits  WasteDeposit[] @relation("WasteManagerDeposits")
  credits           Credit[]
  notifications     Notification[]
  payoutRequests    PayoutRequest[]
  processedPayouts  PayoutRequest[] @relation("ProcessedPayouts")
  assignments       WasteManagerAssignment[]
  
  // Indexes for performance
  @@index([role])
  @@index([isVerified])
  @@index([isAvailable])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([creditsBalance]) // For balance-based queries
  @@map("users")
}

// Waste types with configurable rates
model WasteType {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  ratePerKg   Decimal @db.Decimal(10, 2) // Use Decimal for money/credits
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // Soft delete support
  
  // Relations
  wasteDeposits WasteDeposit[]
  
  @@index([isActive])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("waste_types")
}

// Waste deposit requests
model WasteDeposit {
  id              String              @id @default(cuid())
  userId          String
  wasteManagerId  String?
  wasteTypeId     String
  quantityKg      Decimal             @db.Decimal(8, 3) // More precise for weight
  latitude        Decimal             @db.Decimal(10, 8) // More precise for coordinates
  longitude       Decimal             @db.Decimal(11, 8)  // More precise for coordinates
  address         String?
  status          WasteDepositStatus  @default(PENDING)
  creditsEarned   Decimal             @db.Decimal(10, 2) @default(0) // Use Decimal for money
  // Photos will be handled by WasteDepositPhoto table
  notes           String?
  
  // Audit timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?           // Soft delete support
  assignedAt      DateTime?
  collectedAt     DateTime?
  verifiedAt      DateTime?
  completedAt     DateTime?
  
  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  wasteManager    User?               @relation("WasteManagerDeposits", fields: [wasteManagerId], references: [id])
  wasteType       WasteType           @relation(fields: [wasteTypeId], references: [id])
  credits         Credit[]
  assignments     WasteManagerAssignment[]
  photos          WasteDepositPhoto[]
  history         WasteDepositHistory[]
  
  // Indexes for performance
  @@index([userId])
  @@index([wasteManagerId])
  @@index([wasteTypeId])
  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([latitude, longitude]) // For location-based queries
  @@index([status, createdAt]) // Optimize common queries like 'show all pending deposits'
  @@map("waste_deposits")
}

// Waste manager assignments (first-come-first-served)
model WasteManagerAssignment {
  id              String   @id @default(cuid())
  wasteDepositId  String
  wasteManagerId  String
  status          AssignmentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  
  // Relations
  wasteDeposit    WasteDeposit @relation(fields: [wasteDepositId], references: [id], onDelete: Cascade)
  wasteManager    User         @relation(fields: [wasteManagerId], references: [id], onDelete: Cascade)
  
  @@unique([wasteDepositId, wasteManagerId])
  @@index([wasteDepositId])
  @@index([wasteManagerId])
  @@index([status])
  @@index([createdAt])
  @@map("waste_manager_assignments")
}

// Credits system
model Credit {
  id              String     @id @default(cuid())
  userId          String
  amount          Decimal     @db.Decimal(10, 2) // Use Decimal for money
  type            CreditType
  wasteDepositId  String?
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wasteDeposit    WasteDeposit? @relation(fields: [wasteDepositId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([wasteDepositId])
  @@map("credits")
}

// Payout requests
model PayoutRequest {
  id          String   @id @default(cuid())
  userId      String
  amount      Decimal  @db.Decimal(10, 2) // Use Decimal for money
  status      PayoutStatus @default(PENDING)
  reason      String?  // For rejections
  processedById String? // Admin who processed (foreign key)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processedAt DateTime?
  deletedAt   DateTime? // Soft delete support
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  processedBy User?    @relation("ProcessedPayouts", fields: [processedById], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("payout_requests")
}

// Notifications system
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// System settings (for admins to configure)
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  
  @@index([key])
  @@index([updatedAt])
  @@map("system_settings")
}

// Waste deposit photos with metadata
model WasteDepositPhoto {
  id              String   @id @default(cuid())
  wasteDepositId  String
  url             String
  filename        String?
  fileSize        Int?     // File size in bytes
  mimeType        String?  // MIME type (image/jpeg, etc.)
  uploadedAt      DateTime @default(now())
  
  // Relations
  wasteDeposit    WasteDeposit @relation(fields: [wasteDepositId], references: [id], onDelete: Cascade)
  
  @@index([wasteDepositId])
  @@index([uploadedAt])
  @@map("waste_deposit_photos")
}

// Waste deposit status history for audit trail
model WasteDepositHistory {
  id              String              @id @default(cuid())
  wasteDepositId  String
  status          WasteDepositStatus
  changedBy       String?             // User ID who made the change
  reason          String?             // Optional reason for status change
  createdAt       DateTime            @default(now())
  
  // Relations
  wasteDeposit    WasteDeposit        @relation(fields: [wasteDepositId], references: [id], onDelete: Cascade)
  
  @@index([wasteDepositId])
  @@index([status])
  @@index([createdAt])
  @@map("waste_deposit_history")
}

// System-wide notifications (broadcast messages)
model SystemNotification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isActive    Boolean  @default(true)
  targetRoles UserRole[] // Which roles should see this notification
  expiresAt   DateTime? // Optional expiration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive])
  @@index([type])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("system_notifications")
}
